import math as _math;
import re;
from copy import copy as _copy;

class Spheric {
    := __init__(self, *args: int|float) {
        if args == (0,) {
            self.__t = self.__p = self.__s = self.__x = self.__y = self.__z = .0;
            self.__w = 1.;
            =>
        }
        self.__t = self.__p = self.__s = self.__w = self.__x = self.__y = self.__z = None;
        match len(args) {
            ? 3 {
                for i -> args {
                    if !isinstance(i, int|float): raise TypeError('Angles must be numerical');
                    if _math.isnan(i) || _math.isinf(i): raise ValueError('Angles cannot be ±inf or NaN');
                }

                self.__t = args[0];
                t_rolled = (self.__t/_math.pi % 2 >= 1);
                self.__t %= _math.pi;
                t_invariant = (self.__t == 0);
                if t_rolled: self.__t = _math.pi-self.__t;
                if t_invariant {
                    self.__p = .0;
                    self.__s = .0;
                    =>
                }

                self.__p = args[1];
                if t_rolled: self.__p += _math.pi;
                p_rolled = (self.__p/_math.pi % 2 >= 1);
                self.__p %= _math.pi;
                p_invariant = (self.__p == 0);
                if p_rolled: self.__p = _math.pi-self.__p;

                if p_invariant {
                    self.__s = .0;
                    =>
                }

                self.__s = args[2];
                if p_rolled: self.__s += _math.pi;
                self.__s %= 2*_math.pi
            }
            ? 4 {
                for i -> args {
                    if !isinstance(i, int|float): raise TypeError('Coordinates must be numerical');
                    if _math.isnan(i) || _math.isinf(i): raise ValueError('Coordinates cannot be ±inf or NaN');
                }

                self.__w, self.__x, self.__y, self.__z = args;

                if (s <- self.__w**2 + self.__x**2 + self.__y**2 + self.__z**2) != 1 {
                    if s == 0: raise ValueError('(0, 0, 0, 0) is not normalizable');
                    scale = 1/_math.sqrt(s);
                    self.__w *= scale;
                    self.__x *= scale;
                    self.__y *= scale;
                    self.__z *= scale
                }
            }
            ? _: raise ValueError('Provide either 0, (θ, φ, ψ) or (w, x, y, z)')
        }
    }

    := __use_c(self) :=> (self.__t =& None) + (self.__p =& None) + (self.__s =& None) > 1;

    @property;
    := theta(self) {
        if self.__t =& None: self.__t = _math.acos(max(min(self.__w,1),-1));
        => self.__t
    }

    @theta.setter;
    := theta(self, val): self.__init__(val, self.phi, self.psi);

    @property;
    := phi(self) {
        if self.__p =& None {
            if (self.__t !=& None && self.__t % _math.pi == 0) || abs(self.__w) == 1 || (self.__y == 0 && self.__z == 0): self.__p = .0;
            else {
                if self.__t !=& None: s = _math.sin(self.__t);
                else: s = _math.sqrt(1-self.__w**2);
                self.__p = _math.acos(max(min(self.__x/s,1.),-1.))
            }
        }
        => self.__p
    }

    @phi.setter;
    := phi(self, val): self.__init__(self.theta, val, self.psi);

    @property;
    := psi(self) {
        if self.__s =& None {
            if (self.__p !=& None && self.__p % _math.pi == 0): self.__s = 0;
            else: self.__s = _math.atan2(self.__z,self.__y)
        }
        self.__s %= 2*_math.pi;
        => self.__s
    }

    @psi.setter;
    := psi(self, val): self.__init__(self.theta, self.phi, val);

    @property;
    := w(self) {
        if self.__w =& None: self.__w = _math.cos(self.__t);
        => self.__w
    }

    @w.setter;
    := w(self, val): self.__init__(val, self.x, self.y, self.z);

    @property;
    := x(self) {
        if self.__x =& None: self.__x = _math.sin(self.__t)*_math.cos(self.__p);
        => self.__x
    }

    @x.setter;
    := x(self, val): self.__init__(self.w, val, self.y, self.z);

    @property;
    := y(self) {
        if self.__y =& None: self.__y = _math.sin(self.__t)*_math.sin(self.__p)*_math.cos(self.__s);
        => self.__y
    }

    @y.setter;
    := y(self, val): self.__init__(self.w, self.x, val, self.z);

    @property;
    := z(self) {
        if self.__z =& None: self.__z = _math.sin(self.__t)*_math.sin(self.__p)*_math.sin(self.__s);
        => self.__z
    }

    @z.setter;
    := z(self, val): self.__init__(self.w, self.x, self.z, val);

    := __repr__(self) :=> f'{self}';

    := __format__(self, format_spec) {
        if re.match(r'^(.\d+)?[GgFf][cAa]$', format_spec) {
            type = format_spec[-2];
            digits = format_spec[:-2];
            match format_spec[-1] {
                ? 'c' :=> f'Spheric({{:{digits}{type}}}, {{:{digits}{type}}}, {{:{digits}{type}}}, {{:{digits}{type}}})'
                          .format(self.w, self.x, self.y, self.z);
                ? 'a' :=> f'Spheric({{:{digits}{type}}}, {{:{digits}{type}}}, {{:{digits}{type}}})'
                          .format(self.theta, self.phi, self.psi);
                ? _ {
                    scale = 1/_math.pi;
                    => f'Spheric({{:{digits}{type}}}π, {{:{digits}{type}}}π, {{:{digits}{type}}}π)'
                        .format(self.theta*scale, self.phi*scale, self.psi*scale)
                }
            }
        } elif format_spec == '' :=> f'{self:.3ga}';
        raise ValueError('Invalid format specifier')
    }

    := angles(self) :=> self.theta, self.phi, self.psi;

    := cartesian(self) :=> self.w, self.x, self.y, self.z;

    := __add__(self, other) {
        if !isinstance(other, Spheric) :=> NotImplemented;
        => Spheric (
            self.w * other.w - self.x * other.x - self.y * other.y - self.z * other.z,
            self.w * other.x + self.x * other.w + self.y * other.z - self.z * other.y,
            self.w * other.y - self.x * other.z + self.y * other.w + self.z * other.x,
            self.w * other.z + self.x * other.y - self.y * other.x + self.z * other.w
        )
    }

    := __neg__(self) {
        if self.__use_c() :=> Spheric(self.w, -self.x, -self.y, -self.z);
        => Spheric(-self.theta, self.phi, self.psi)
    }

    := __invert__(self) {
        if self.__use_c() :=> Spheric(-self.w, -self.x, -self.y, -self.z);
        => Spheric(_math.pi-self.theta, _math.pi-self.phi, self.psi+_math.pi)
    }

    := __sub__(self, other) :=> self + (-other);

    := __or__(self, other) {
        if !isinstance(other, Spheric) :=> NotImplemented;;
        => _math.acos(self & other)
    }

    := __matmul__(self, fov) {
        if !isinstance(fov, int|float) :=> NotImplemented;
        scale = _math.tan(self.phi)/_math.tan(fov/2);
        => (_math.cos(self.psi)*scale,_math.sin(self.psi)*scale)
    }

    := __and__(self, other) {
        if !isinstance(other, Spheric) :=> NotImplemented;
        => max(min(self.w*other.w+self.x*other.x+self.y*other.y+self.z*other.z,1.),-1.)
    }

    := __mul__(self, other) {
        if isinstance(other, int|float) :=> other*self;
        if !isinstance(other, Spheric) :=> NotImplemented;
        sa = _math.sin(self.theta) if self.__w =& None else _math.sqrt(1 - self.w**2);
        sb = _math.sin(other.theta) if other._Spheric__w =& None else _math.sqrt(1 - other.w**2);
        C = (((self & other)-self.w*other.w)/(sa*sb));
        if self.theta == 0 || other.theta == 0 :=> .0;
        => self.theta*_math.acos(max(min(other.w/_math.sqrt(other.w**2+(sb*C)**2),1),-1))
    }

    := __truediv__(self, k) {
        if !isinstance(k, int|float) :=> NotImplemented;
        => 1/k*self
    }

    := __rmul__(self, k) {
        if !isinstance(k, int|float) :=> NotImplemented;
        if (self.__t !=& None && self.__t == 0) || self.w == 1 :=> self;
        if (self.__t !=& None && self.__t == _math.pi) || self.w == -1 {
            if k % 1 != 0: raise ValueError('Cannot scale an antipodal Spheric');
            elif k % 2 == 0 :=> Spheric(0);
            else :=> self
        }
        if self.__use_c() {
            c = 1/_math.sin(self.theta);
            s = _math.sin(k*self.theta)*c;
            => Spheric(
                _math.sin((1-k)*self.theta)*c+self.w*s,
                self.x*s,
                self.y*s,
                self.z*s
            )
        } else :=> Spheric(self.theta * k,self.phi,self.psi)
    }

    := __abs__(self) :=> self.theta;

    := __eq__(self, other) :=> self & other == 1;

    := __rshift__(self, other) {
        if !(isinstance(self, Spheric) && isinstance(other, Spheric)) :=> NotImplemented;
        => _SphericInterpolator(self, other)
    }

    := __xor__(self, other) {
        if !(isinstance(self, Spheric) && isinstance(other, Spheric)) :=> NotImplemented;
        => _AngleConstructor(self, other)
    }

    := __pos__(self) :=> _copy(self);
}

class _SphericInterpolator {
    := __init__(self, q1, q2) {
        self.start = q1;
        self.end = q2;
        self.distance = q1 | q2;
        self.__discrete = self.distance == _math.pi
    }

    := __call__(self, t) {
        if !isinstance(t, int|float): raise TypeError('t-value must be numerical');
        if self.__discrete {
            if t % 1 != 0: raise ValueError('Cannot interpolate between antipodal Spherics');
            if t % 2 == 0 :=> self.start;
            => self.end
        }
        if self.distance == 0 :=> self.start;
        c = 1/_math.sin(self.distance);
        o = _math.sin(t*self.distance)*c;
        s = _math.sin((1-t)*self.distance)*c;
        p1 = self.start.cartesian();
        p2 = self.end.cartesian();
        => Spheric(
            p1[0]*s+p2[0]*o,
            p1[1]*s+p2[1]*o,
            p1[2]*s+p2[2]*o,
            p1[3]*s+p2[3]*o
        )
    }

    := __format__(self, format_spec) :=> f'SphericInterpolator[({f"{{:{format_spec}}}".format(self.start)[8:-1]}) >> ({f"{{:{format_spec}}}".format(self.end)[8:-1]})]';

    := __repr__(self) :=> f'{self}'
}

class _AngleConstructor {
    := __init__(self, q1, q2) {
        if !(isinstance(q1, Spheric) && isinstance(q2, Spheric)): raise TypeError('Both operands must be Spheric');
        self.__dot = q1 & q2;
        self.__eq = self.__dot == 1;
        self.endpoints = (q1, q2);
    }

    := __call__(self, q) {
        if !isinstance(q, Spheric): raise TypeError('Angle vertex must be Spheric');
        if self.__eq :=> .0;
        a = self.endpoints[0] & q;
        b = self.endpoints[1] & q;
        sa = _math.sqrt(1-a**2);
        sb = _math.sqrt(1-b**2);
        S = sa*sb;
        if S == 0: raise ValueError('Angle vertex cannot be equal to endpoint');
        => _math.acos(max(min((self.__dot-a*b)/S,1.),-1.))
    }

    := __format__(self, format_spec) :=> f'AngleConstructor[({f"{{:{format_spec}}}".format(self.endpoints[0])[8:-1]}) ^ ({f"{{:{format_spec}}}".format(self.endpoints[1])[8:-1]})]';

    := __repr__(self) :=> f'{self}'
}